"""
You are given an array of integers `a`.
A new array `b` is generated by rearranging the elements of `a`
	in the following way:

	* `b[0]` is equal to `a[0]`;
	* `b[1]` is equal to the `last element` of `a`;
	* `b[2]` is equal to `a[1]`;
	* `b[3]` is equal to the `second-last element` of `a`;
	* `b[4]` is equal to `a[2]`;
	* `b[5]` is equal to the `third-last element` of `a`;
	* and so on.

Your task is to determine whether the new array `b` is sorted in
	strictly ascending order or not.

Here is how the process of generating the new array `b` works:

![CodeSignal Example](https://codesignal.s3.amazonaws.com/tasks/alternatingSort
/img/example.gif?_tm=1609427383398)

Example:

For `a = [1, 3, 5, 6, 4, 2]`, the output should be alternatingSort(a) = true.

	The new array `b` will look like `[1, 2, 3, 4, 5, 6]`,
		which is in strictly ascending order, so the answer is true.

For `a = [1, 4, 5, 6, 3]`, the output should be alternatingSort(a) = false.

	The new array `b` will look like `[1, 3, 4, 6, 5]`,
		which is not in strictly ascending order, so the answer is false.

Input/Output:

[execution time limit] 4 seconds (py3)

[input] array.integer a
The given array of integers.

Guaranteed constraints:
1 ≤ a.length ≤ 105,
-109 ≤ a[i] ≤ 109.

[output] boolean
A boolean representing whether the new array `b` will be sorted
	in strictly ascending order or not.

"""

"""
Assumptions:
- `a` length will be from 1-10^5
- `a` values will be from -10^9-10^9
- `a` could already be sorted.abs

Test Cases:
a = [1, 3, 5, 6, 4, 2]
worked out --> b = [1, 2, 3, 4, 5, 6]
output --> True

a = [1, 4, 5, 6, 3]
worked out --> [1, 3, 4, 6, 5]
output --> False

Plan:
1. Create a new list `b` to store the values from `a`
2. Create a left and right pointer to keep track of the index locations.
3. Iterate through list `a` with the left and right pointers to get the 
values to add to list `b`.
4. Check if `b` is in ascending order, return True or False.
"""


def alternatingSort(a):
	b = [0] * len(a)
	left = 0
	right = -1

	for i in range(0, len(a) - 2):
		if b[i] == 0 and b[left] != b[right]:
			b[i] = a[left]
			b[i + 1] = a[right]

		else:
			b[i + 1] = a[left + 1]
			b[i + 2] = a[right - 1]

		left += 1
		right -= 1
		print(left)
		print(right)
		print(b)

	print(b)

	if b is sorted(b):
		return True

	else:
		return False
